// === –ë–£–†–ì–ï–†-–ú–ï–ù–Æ ===
const burger = document.getElementById('burger');
const navMenu = document.getElementById('navMenu');

burger.addEventListener('click', () => {
  navMenu.classList.toggle('open');
});

document.querySelectorAll('.n-links a').forEach(link => {
  link.addEventListener('click', () => {
    navMenu.classList.remove('open');
  });
});

// === –ö–í–ò–ó ===
const questions = [
  {
    text: "–ö–∞–∫–æ–π —É –≤–∞—Å –∫–æ–≤–µ—Ä?",
    options: [
      "–°–∏–Ω—Ç–µ—Ç–∏–∫–∞ / –®–µ—Ä—Å—Ç—å / –ü–∞–ª–∞c",
      "–®—ë–ª–∫ / –†—É—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞",
      "–¢—Ä–∞–≤–∫–∞ / –í–∏—Å–∫–æ–∑–∞ / –ì–æ–±–µ–ª–µ–Ω",
      "–ù–µ –∑–Ω–∞—é ‚Äî –≤—ã–±–µ—Ä–µ—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥"
    ]
  },
  {
    text: "–ö–∞–∫–∞—è –ø–ª–æ—â–∞–¥—å –∫–æ–≤—Ä–∞?",
    options: [
      "–î–æ 5 –º¬≤", "5‚Äì10 –º¬≤", "10‚Äì20 –º¬≤", "–ë–æ–ª–µ–µ 20 –º¬≤"
    ]
  },
  {
    text: "–ö–∞–∫–∏–µ –ø—è—Ç–Ω–∞ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å?",
    options: [
      "–ñ–∏—Ä / –ï–¥–∞", "–ú–æ—á–∞ / –ó–∞–ø–∞—Ö", "–ö—Ä–∞—Å–∫–∞ / –ö—Ä–æ–≤—å", "–û–±—ã—á–Ω–æ–µ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–µ"
    ]
  },
  {
    text: "–ì–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?",
    options: [
      "–ú–æ—Å–∫–≤–∞", "–ú–û", "–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥", "–ù–µ–≤–∞–∂–Ω–æ"
    ]
  },
  {
    text: "–ö–∞–∫–æ–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å–ª—É–≥–∏?",
    options: [
      "–°–∞–º–æ–≤—ã–≤–æ–∑ –∏ –¥–æ—Å—Ç–∞–≤–∫–∞",
      "–ü—Ä–∏–µ–∑–∂–∞–µ—Ç–µ —Å–∞–º–∏",
      "–ù—É–∂–Ω–æ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ"
    ]
  }
];

let currentStep = 0;
const answers = [];

const questionStep = document.getElementById('question-step');
const backBtn = document.getElementById('backBtn');
const nextBtn = document.getElementById('nextBtn');

function renderQuestion() {
  const question = questions[currentStep];

  let html = `<div class="question-title">–í–æ–ø—Ä–æ—Å ${currentStep + 1} –∏–∑ ${questions.length}<br>${question.text}</div>`;
  html += '<div class="options">';
  question.options.forEach((opt, i) => {
    html += `<div class="option" data-index="${i}">${opt}</div>`;
  });
  html += '</div>';

  questionStep.innerHTML = html;

  document.querySelectorAll('.option').forEach(opt => {
    opt.addEventListener('click', () => {
      document.querySelectorAll('.option').forEach(o => o.classList.remove('selected'));
      opt.classList.add('selected');
      answers[currentStep] = opt.innerText;
    });
  });

  backBtn.style.display = currentStep > 0 ? 'inline-block' : 'none';
  nextBtn.innerText = currentStep === questions.length - 1 ? '–î–∞–ª–µ–µ' : '–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å';
}

function renderForm() {
  questionStep.innerHTML = `
    <div class="question-title">–û—Ç–ª–∏—á–Ω–æ, –æ—Å—Ç–∞–ª—Å—è –æ–¥–∏–Ω —à–∞–≥!<br>–û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ:</div>
    <input type="text" id="name" placeholder="–ò–º—è">
    <input type="tel" id="phone" placeholder="–¢–µ–ª–µ—Ñ–æ–Ω">
    <small>–ù–∞–∂–∏–º–∞—è –Ω–∞ –∫–Ω–æ–ø–∫—É, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å <a href="#" target="_blank">–ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</a>.</small>
  `;

  nextBtn.innerText = '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É';
  backBtn.style.display = 'inline-block';
}

nextBtn.addEventListener('click', () => {
  if (currentStep < questions.length) {
    if (answers[currentStep]) {
      currentStep++;
      if (currentStep < questions.length) {
        renderQuestion();
      } else {
        renderForm();
      }
    } else {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç.');
    }
  } else {
    const name = document.getElementById('name').value.trim();
    const phone = document.getElementById('phone').value.trim();

    if (name && phone) {
      const text = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –•–æ—á—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ü–µ–Ω—É:%0A` +
        questions.map((q, i) => `‚ùì ${q.text}%0A‚úÖ ${answers[i]}`).join('%0A') +
        `%0Aüë§ –ò–º—è: ${name}%0Aüìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}`;

      const phoneNumber = "+77077498423";
      window.open(`https://wa.me/${phoneNumber}?text=${text}`, '_blank');
    } else {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.');
    }
  }
});

backBtn.addEventListener('click', () => {
  if (currentStep > 0) {
    currentStep--;
    renderQuestion();
  }
});

renderQuestion();
